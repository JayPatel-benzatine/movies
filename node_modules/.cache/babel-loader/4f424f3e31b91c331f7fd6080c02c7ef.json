{"ast":null,"code":"var _jsxFileName = \"/Users/iphone6s/Desktop/jay/Movie/movie/src/Pages/Series/Series.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport SingleContent from '../../components/SingleContent/SingleContent';\nimport CustomPagination from '../../components/Pagination/CustomPagination';\nimport Genres from '../../components/Genres/Genres';\nimport axios from 'axios';\nimport useGenre from '../../hooks/useGenre';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Series = () => {\n  _s();\n\n  const [genres, setGenres] = useState([]);\n  const [selectedGenres, setSelectedGenres] = useState([]);\n  const [page, setPage] = useState(1);\n  const [content, setContent] = useState([]);\n  const [numOfPages, setNumOfPages] = useState();\n  const genreforURL = useGenre(selectedGenres);\n\n  const fetchMovies = async () => {\n    const {\n      data\n    } = await axios.get(`https://api.themoviedb.org/3/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=${page}&with_genres=${genreforURL}`);\n    setContent(data.results);\n    setNumOfPages(data.total_pages);\n  };\n\n  useEffect(() => {\n    window.scroll(0, 0);\n    fetchMovies(); // eslint-disable-next-line\n  }, [page, genreforURL]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pageTitle\",\n      children: \" TV Series\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Genres, {\n      type: \"tv\",\n      selectedGenres: selectedGenres,\n      setSelectedGenres: setSelectedGenres,\n      genres: genres,\n      setGenres: setGenres,\n      setPage: setPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"trending\",\n      children: content && content.map(c => /*#__PURE__*/_jsxDEV(SingleContent, {\n        id: c.id,\n        poster: c.poster_path,\n        title: c.title || c.name,\n        date: c.first_air_date || c.release_date,\n        media_type: \"tv\",\n        vote_average: c.vote_average\n      }, c.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 6\n    }, this), numOfPages > 1 && /*#__PURE__*/_jsxDEV(CustomPagination, {\n      setPage: setPage,\n      numOfPages: numOfPages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Series, \"XK1YKfc94s2l+Ob0biLUcn7v/6s=\", false, function () {\n  return [useGenre];\n});\n\n_c = Series;\nexport default Series;\n\nvar _c;\n\n$RefreshReg$(_c, \"Series\");","map":{"version":3,"names":["React","useEffect","useState","SingleContent","CustomPagination","Genres","axios","useGenre","Series","genres","setGenres","selectedGenres","setSelectedGenres","page","setPage","content","setContent","numOfPages","setNumOfPages","genreforURL","fetchMovies","data","get","process","env","REACT_APP_API_KEY","results","total_pages","window","scroll","map","c","id","poster_path","title","name","first_air_date","release_date","vote_average"],"sources":["/Users/iphone6s/Desktop/jay/Movie/movie/src/Pages/Series/Series.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport SingleContent from '../../components/SingleContent/SingleContent'\nimport CustomPagination from '../../components/Pagination/CustomPagination'\nimport Genres from '../../components/Genres/Genres'\nimport axios from 'axios'\nimport useGenre from '../../hooks/useGenre'\n\nconst Series = () => {\n  const [genres, setGenres] = useState([]);\n  const [selectedGenres, setSelectedGenres] = useState([]);\n  const [page, setPage] = useState(1);\n  const [content, setContent] = useState([]);\n  const [numOfPages, setNumOfPages] = useState();\n  const genreforURL = useGenre(selectedGenres);\n  const fetchMovies = async () => {\n    const { data } = await axios.get(\n      `https://api.themoviedb.org/3/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=${page}&with_genres=${genreforURL}`\n    )\n    setContent(data.results);\n    setNumOfPages(data.total_pages);\n  };\n  useEffect(() => {\n    window.scroll(0, 0);\n    fetchMovies();\n    // eslint-disable-next-line\n  }, [page,genreforURL]);\n\n  return (<>\n    <div className='pageTitle'> TV Series</div>\n    <Genres\n        type=\"tv\"\n        selectedGenres={selectedGenres}\n        setSelectedGenres={setSelectedGenres}\n        genres={genres}\n        setGenres={setGenres}\n        setPage={setPage}\n      />\n     <div className=\"trending\">\n        {content &&\n          content.map((c) => (\n            <SingleContent\n              key={c.id}\n              id={c.id}\n              poster={c.poster_path}\n              title={c.title || c.name}\n              date={c.first_air_date || c.release_date}\n              media_type=\"tv\"\n              vote_average={c.vote_average}\n            />\n          ))}\n      </div>\n      {numOfPages > 1 && (\n        <CustomPagination setPage={setPage} numOfPages={numOfPages} />\n      )}\n\n      </>)\n}\n\nexport default Series"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,8CAA1B;AACA,OAAOC,gBAAP,MAA6B,8CAA7B;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,sBAArB;;;;AAEA,MAAMC,MAAM,GAAG,MAAM;EAAA;;EACnB,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;EACA,MAAM,CAACS,cAAD,EAAiBC,iBAAjB,IAAsCV,QAAQ,CAAC,EAAD,CAApD;EACA,MAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,CAAD,CAAhC;EACA,MAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,EAAD,CAAtC;EACA,MAAM,CAACe,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,EAA5C;EACA,MAAMiB,WAAW,GAAGZ,QAAQ,CAACI,cAAD,CAA5B;;EACA,MAAMS,WAAW,GAAG,YAAY;IAC9B,MAAM;MAAEC;IAAF,IAAW,MAAMf,KAAK,CAACgB,GAAN,CACpB,oDAAmDC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,wFAAuFZ,IAAK,gBAAeM,WAAY,EADpL,CAAvB;IAGAH,UAAU,CAACK,IAAI,CAACK,OAAN,CAAV;IACAR,aAAa,CAACG,IAAI,CAACM,WAAN,CAAb;EACD,CAND;;EAOA1B,SAAS,CAAC,MAAM;IACd2B,MAAM,CAACC,MAAP,CAAc,CAAd,EAAiB,CAAjB;IACAT,WAAW,GAFG,CAGd;EACD,CAJQ,EAIN,CAACP,IAAD,EAAMM,WAAN,CAJM,CAAT;EAMA,oBAAQ;IAAA,wBACN;MAAK,SAAS,EAAC,WAAf;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADM,eAEN,QAAC,MAAD;MACI,IAAI,EAAC,IADT;MAEI,cAAc,EAAER,cAFpB;MAGI,iBAAiB,EAAEC,iBAHvB;MAII,MAAM,EAAEH,MAJZ;MAKI,SAAS,EAAEC,SALf;MAMI,OAAO,EAAEI;IANb;MAAA;MAAA;MAAA;IAAA,QAFM,eAUL;MAAK,SAAS,EAAC,UAAf;MAAA,UACIC,OAAO,IACNA,OAAO,CAACe,GAAR,CAAaC,CAAD,iBACV,QAAC,aAAD;QAEE,EAAE,EAAEA,CAAC,CAACC,EAFR;QAGE,MAAM,EAAED,CAAC,CAACE,WAHZ;QAIE,KAAK,EAAEF,CAAC,CAACG,KAAF,IAAWH,CAAC,CAACI,IAJtB;QAKE,IAAI,EAAEJ,CAAC,CAACK,cAAF,IAAoBL,CAAC,CAACM,YAL9B;QAME,UAAU,EAAC,IANb;QAOE,YAAY,EAAEN,CAAC,CAACO;MAPlB,GACOP,CAAC,CAACC,EADT;QAAA;QAAA;QAAA;MAAA,QADF;IAFL;MAAA;MAAA;MAAA;IAAA,QAVK,EAwBHf,UAAU,GAAG,CAAb,iBACC,QAAC,gBAAD;MAAkB,OAAO,EAAEH,OAA3B;MAAoC,UAAU,EAAEG;IAAhD;MAAA;MAAA;MAAA;IAAA,QAzBE;EAAA,gBAAR;AA6BD,CAjDD;;GAAMT,M;UAMgBD,Q;;;KANhBC,M;AAmDN,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}